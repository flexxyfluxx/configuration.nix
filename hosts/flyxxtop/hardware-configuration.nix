# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/d3ff2b1e-4eeb-473f-915a-2f23812921a4";
      fsType = "btrfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/E8EC-5C4B";
      fsType = "vfat";
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/7fe68072-cbf4-4c82-baad-e9dccfab6220";
      fsType = "ext4";
    };

  fileSystems."/mnt/ssd1" =
    { device = "/dev/disk/by-uuid/1f02b008-2a8f-487f-9192-ac33b5791806";
      fsType = "btrfs";
    };

  fileSystems."/mnt/hdd1" = lib.mkIf config.enableHDD
    { device = "/dev/disk/by-uuid/3EA469F9A469B455";
      # fsType = "ntfs3";
      fsType = "ntfs";
      options =
          [ "nofail"
          ];
      /* options =
        [ "uid=1000"
          "gid=1000"
          "rw"
          "user"
          "exec"
          "umask=000"
        ]; */
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/b0808574-1c37-495a-a5b5-7984f9774745"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
